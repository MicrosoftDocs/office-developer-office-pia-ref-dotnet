<Type Name="SignatureProvider" FullName="Microsoft.Office.Core.SignatureProvider">
  <TypeSignature Language="C++ CLI" Value="public interface class SignatureProvider" />
  <TypeSignature Language="C#" Value="public interface SignatureProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract SignatureProvider" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Core.SignatureProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface SignatureProvider" />
  <TypeSignature Language="F#" Value="type SignatureProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>office</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.Guid("000CD6A3-0000-0000-C000-000000000046")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.Guid("000CD6A3-0000-0000-C000-000000000046")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.TypeLibType(4160)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.TypeLibType(4160)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a signature provider add-in.</summary>
    <remarks>
      <para>
        <b>Note</b>: Signature providers are implemented exclusively in custom COM add-ins and cannot be implemented in Microsoft Visual Basic for Applications (VBA).</para>
      <para />
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GenerateSignatureLineImage">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; stdole::IPictureDisp ^ GenerateSignatureLineImage(Microsoft::Office::Core::SignatureLineImage siglnimg, Microsoft::Office::Core::SignatureSetup ^ psigsetup, Microsoft::Office::Core::SignatureInfo ^ psiginfo, System::Object ^ XmlDsigStream);" />
      <MemberSignature Language="C#" Value="public stdole.IPictureDisp GenerateSignatureLineImage (Microsoft.Office.Core.SignatureLineImage siglnimg, Microsoft.Office.Core.SignatureSetup psigsetup, Microsoft.Office.Core.SignatureInfo psiginfo, object XmlDsigStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class stdole.IPictureDisp GenerateSignatureLineImage([in]valuetype Microsoft.Office.Core.SignatureLineImage siglnimg, [in]class Microsoft.Office.Core.SignatureSetup psigsetup, [in]class Microsoft.Office.Core.SignatureInfo psiginfo, [in]object XmlDsigStream) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.SignatureProvider.GenerateSignatureLineImage(Microsoft.Office.Core.SignatureLineImage,Microsoft.Office.Core.SignatureSetup,Microsoft.Office.Core.SignatureInfo,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateSignatureLineImage (siglnimg As SignatureLineImage, psigsetup As SignatureSetup, psiginfo As SignatureInfo, XmlDsigStream As Object) As IPictureDisp" />
      <MemberSignature Language="F#" Value="abstract member GenerateSignatureLineImage : Microsoft.Office.Core.SignatureLineImage * Microsoft.Office.Core.SignatureSetup * Microsoft.Office.Core.SignatureInfo * obj -&gt; stdole.IPictureDisp" Usage="signatureProvider.GenerateSignatureLineImage (siglnimg, psigsetup, psiginfo, XmlDsigStream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610743808)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610743808)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>stdole.IPictureDisp</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.InteropServices.ComAliasName("stdole.IPictureDisp")]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComAliasName("stdole.IPictureDisp")&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="siglnimg" Type="Microsoft.Office.Core.SignatureLineImage" />
        <Parameter Name="psigsetup" Type="Microsoft.Office.Core.SignatureSetup" />
        <Parameter Name="psiginfo" Type="Microsoft.Office.Core.SignatureInfo" />
        <Parameter Name="XmlDsigStream" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="siglnimg">Contains the name if the signature line graphic.</param>
        <param name="psigsetup">Specifies initial settings of the signature provider add-in.</param>
        <param name="psiginfo">Specifies information about the signature provider add-in.</param>
        <param name="XmlDsigStream">To be added.</param>
        <summary>Gets a signature line image.</summary>
        <returns>
          <b>IPictureDisp</b>
        </returns>
        <remarks>
          <para>The <see cref="T:Microsoft.Office.Core.SignatureProvider" /> object is used exclusively in custom signature provider add-ins. This method is called for each of the images that is displayed in the document's content. The  method can be called asynchronously. For example, the method may be called for the "Unsigned" image and the "No-software" image directly after signature setup. The method may then be called after signing for the "Signed" image. The four images used are: </para>
          <list type="bullet">
            <item>
              <para>
                <see cref="F:Microsoft.Office.Core.SignatureLineImage.siglnimgSoftwareRequired" />: This image is displayed to the user if the signature provider add-in is not installed on the user's computer. If the user tries to sign or view a signature line, they are redirected to a provider-supplied hyperlink specified in the <see cref="M:Microsoft.Office.Core.SignatureProvider.GetProviderDetail(Microsoft.Office.Core.SignatureProviderDetail)" /> method.</para>
            </item>
            <item>
              <para>
                <see cref="F:Microsoft.Office.Core.SignatureLineImage.siglnimgUnsigned" />: This image is displayed for an unsigned signature image. Basically, when  a document loads with an unsigned signature line, the signature provider prompts for an up-to-date signature image and shows this image.</para>
            </item>
            <item>
              <para>
                <see cref="F:Microsoft.Office.Core.SignatureLineImage.siglnimgSignedValid" />: This is the image that is displayed when a signature line is signed and valid (or, to be more specific, signed and the signature does not register as invalid). When the document opens, it is assumed that all signed signatures are valid until the verification process is complete, at which point a "Signed/invalid" image is displayed for the invalid signatures. Because signature verification is time-intensive, the signature verification runs in parallel with Office on a background thread. Because your add-in implements signature verification, your code runs parallel with Office and should not attempt to display UI during signing or verifying.</para>
            </item>
            <item>
              <para>
                <see cref="F:Microsoft.Office.Core.SignatureLineImage.siglnimgSignedInvalid" />: This is the image we show when a signature line is signed but there is a problem with the signature, such as the document was modified or the user's certificate is revoked. Because your add-in implements signature verification, you can decide how and when a signature is invalid.</para>
            </item>
          </list>
          <para />
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProviderDetail">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetProviderDetail(Microsoft::Office::Core::SignatureProviderDetail sigprovdet);" />
      <MemberSignature Language="C#" Value="public object GetProviderDetail (Microsoft.Office.Core.SignatureProviderDetail sigprovdet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetProviderDetail([in]valuetype Microsoft.Office.Core.SignatureProviderDetail sigprovdet) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.SignatureProvider.GetProviderDetail(Microsoft.Office.Core.SignatureProviderDetail)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProviderDetail (sigprovdet As SignatureProviderDetail) As Object" />
      <MemberSignature Language="F#" Value="abstract member GetProviderDetail : Microsoft.Office.Core.SignatureProviderDetail -&gt; obj" Usage="signatureProvider.GetProviderDetail sigprovdet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610743815)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610743815)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sigprovdet" Type="Microsoft.Office.Core.SignatureProviderDetail" />
      </Parameters>
      <Docs>
        <param name="sigprovdet">Contains an enumerated value representing the type of information to query the add-in for.</param>
        <summary>Queries the signature provider add-in for various details. </summary>
        <returns>
          <b>Object</b>
        </returns>
        <remarks>
          <para>The <see cref="T:Microsoft.Office.Core.SignatureProvider" /> object is used exclusively in custom signature provider add-ins. This method is used to query the add-in for three pieces of information:</para>
          <list type="bullet">
            <item>
              <para>What hash algorithm does the add-in support?</para>
            </item>
            <item>
              <para>Is the add-in only a user interface (UI) or does it support hashing and verification? If <b>True</b> is returned, Microsoft Office does not call the add-in to hash or verify, only to display the UI.</para>
            </item>
            <item>
              <para>What URL should the add-in provide for users if they are missing the signature add-in?</para>
            </item>
          </list>
          <para />
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashStream">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Array ^ HashStream(System::Object ^ QueryContinue, System::Object ^ Stream);" />
      <MemberSignature Language="C#" Value="public Array HashStream (object QueryContinue, object Stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Array HashStream([in]object QueryContinue, [in]object Stream) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.SignatureProvider.HashStream(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HashStream (QueryContinue As Object, Stream As Object) As Array" />
      <MemberSignature Language="F#" Value="abstract member HashStream : obj * obj -&gt; Array" Usage="signatureProvider.HashStream (QueryContinue, Stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610743816)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610743816)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="QueryContinue" Type="System.Object" />
        <Parameter Name="Stream" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="QueryContinue">Provides a way to query the host application for permission to continue the hashing process.</param>
        <param name="Stream">Contains the data stream.</param>
        <summary>Allows a signature provider add-in to create a hash value for the document that you can use to determine if the document contents were tampered with after digital signing.</summary>
        <returns>
          <b>Array</b>
        </returns>
        <remarks>
          <para>The <see cref="T:Microsoft.Office.Core.SignatureProvider" /> object is used exclusively in custom signature provider add-ins. This method is called once per signature data stream in a document. The return value is an array of bytes representing the hash value computed using the hash algorithm.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifySignatureAdded">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifySignatureAdded(System::Object ^ ParentWindow, Microsoft::Office::Core::SignatureSetup ^ psigsetup, Microsoft::Office::Core::SignatureInfo ^ psiginfo);" />
      <MemberSignature Language="C#" Value="public void NotifySignatureAdded (object ParentWindow, Microsoft.Office.Core.SignatureSetup psigsetup, Microsoft.Office.Core.SignatureInfo psiginfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifySignatureAdded([in]object ParentWindow, [in]class Microsoft.Office.Core.SignatureSetup psigsetup, [in]class Microsoft.Office.Core.SignatureInfo psiginfo) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.SignatureProvider.NotifySignatureAdded(System.Object,Microsoft.Office.Core.SignatureSetup,Microsoft.Office.Core.SignatureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub NotifySignatureAdded (ParentWindow As Object, psigsetup As SignatureSetup, psiginfo As SignatureInfo)" />
      <MemberSignature Language="F#" Value="abstract member NotifySignatureAdded : obj * Microsoft.Office.Core.SignatureSetup * Microsoft.Office.Core.SignatureInfo -&gt; unit" Usage="signatureProvider.NotifySignatureAdded (ParentWindow, psigsetup, psiginfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610743812)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610743812)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ParentWindow" Type="System.Object" />
        <Parameter Name="psigsetup" Type="Microsoft.Office.Core.SignatureSetup" />
        <Parameter Name="psiginfo" Type="Microsoft.Office.Core.SignatureInfo" />
      </Parameters>
      <Docs>
        <param name="ParentWindow">Allows the host application to obtain the handle to the window containing the displayed dialog box.</param>
        <param name="psigsetup">Contains initial settings of the signature provider.</param>
        <param name="psiginfo">Contains information about the signature provider add-in.</param>
        <summary>Used to display a dialog box informing the user that the signing process has completed and providing additional functionality for the add-in.</summary>
        <remarks>
          <para>This method is called when the signing process has completed. Allows a signature provider add-in the ability to add additional functionality to the add-in. For example, if you wanted to offer an archive service where a user could upload their signed document, you could use this method to initiate that process.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowSignatureDetails">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowSignatureDetails(System::Object ^ ParentWindow, Microsoft::Office::Core::SignatureSetup ^ psigsetup, Microsoft::Office::Core::SignatureInfo ^ psiginfo, System::Object ^ XmlDsigStream, [Runtime::InteropServices::Out] Microsoft::Office::Core::ContentVerificationResults % pcontverres, [Runtime::InteropServices::Out] Microsoft::Office::Core::CertificateVerificationResults % pcertverres);" />
      <MemberSignature Language="C#" Value="public void ShowSignatureDetails (object ParentWindow, Microsoft.Office.Core.SignatureSetup psigsetup, Microsoft.Office.Core.SignatureInfo psiginfo, object XmlDsigStream, out Microsoft.Office.Core.ContentVerificationResults pcontverres, out Microsoft.Office.Core.CertificateVerificationResults pcertverres);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowSignatureDetails([in]object ParentWindow, [in]class Microsoft.Office.Core.SignatureSetup psigsetup, [in]class Microsoft.Office.Core.SignatureInfo psiginfo, [in]object XmlDsigStream, [out] valuetype Microsoft.Office.Core.ContentVerificationResults&amp; pcontverres, [out] valuetype Microsoft.Office.Core.CertificateVerificationResults&amp; pcertverres) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.SignatureProvider.ShowSignatureDetails(System.Object,Microsoft.Office.Core.SignatureSetup,Microsoft.Office.Core.SignatureInfo,System.Object,Microsoft.Office.Core.ContentVerificationResults@,Microsoft.Office.Core.CertificateVerificationResults@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowSignatureDetails (ParentWindow As Object, psigsetup As SignatureSetup, psiginfo As SignatureInfo, XmlDsigStream As Object, ByRef pcontverres As ContentVerificationResults, ByRef pcertverres As CertificateVerificationResults)" />
      <MemberSignature Language="F#" Value="abstract member ShowSignatureDetails : obj * Microsoft.Office.Core.SignatureSetup * Microsoft.Office.Core.SignatureInfo * obj * ContentVerificationResults * CertificateVerificationResults -&gt; unit" Usage="signatureProvider.ShowSignatureDetails (ParentWindow, psigsetup, psiginfo, XmlDsigStream, pcontverres, pcertverres)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610743814)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610743814)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ParentWindow" Type="System.Object" />
        <Parameter Name="psigsetup" Type="Microsoft.Office.Core.SignatureSetup" />
        <Parameter Name="psiginfo" Type="Microsoft.Office.Core.SignatureInfo" />
        <Parameter Name="XmlDsigStream" Type="System.Object" />
        <Parameter Name="pcontverres" Type="Microsoft.Office.Core.ContentVerificationResults" RefType="out" />
        <Parameter Name="pcertverres" Type="Microsoft.Office.Core.CertificateVerificationResults" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ParentWindow">Contains the handle to the window containing the signature details.</param>
        <param name="psigsetup">Specifies initial settings of the signature provider.</param>
        <param name="psiginfo">Specifies information about the signed signature line.</param>
        <param name="XmlDsigStream">Represents a steam of data or binary large object of XML.</param>
        <param name="pcontverres">Contains a value representing the results of verificating the signature content.</param>
        <param name="pcertverres">Contains a value representing the results of verificating the signing certification.</param>
        <summary>Provides a signature provider add-in the opportunity to display details about a signed signature line and display additional stored information such as a secure time-stamp.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowSignatureSetup">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowSignatureSetup(System::Object ^ ParentWindow, Microsoft::Office::Core::SignatureSetup ^ psigsetup);" />
      <MemberSignature Language="C#" Value="public void ShowSignatureSetup (object ParentWindow, Microsoft.Office.Core.SignatureSetup psigsetup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowSignatureSetup([in]object ParentWindow, [in]class Microsoft.Office.Core.SignatureSetup psigsetup) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.SignatureProvider.ShowSignatureSetup(System.Object,Microsoft.Office.Core.SignatureSetup)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowSignatureSetup (ParentWindow As Object, psigsetup As SignatureSetup)" />
      <MemberSignature Language="F#" Value="abstract member ShowSignatureSetup : obj * Microsoft.Office.Core.SignatureSetup -&gt; unit" Usage="signatureProvider.ShowSignatureSetup (ParentWindow, psigsetup)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610743809)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610743809)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ParentWindow" Type="System.Object" />
        <Parameter Name="psigsetup" Type="Microsoft.Office.Core.SignatureSetup" />
      </Parameters>
      <Docs>
        <param name="ParentWindow">Contains the handle to the window containing the Signature Setup dialog box.</param>
        <param name="psigsetup">Specifies initial settings of the signature provider.</param>
        <summary>Provides a signature provider add-in the opportunity to display the Signature Setup dialog box to the user. </summary>
        <remarks>
          <para>This method is used  for both the insertion time configuration process and if a user later wants to re-configure the signature line. You display the Signature Setup dialog box during this callback and wait for the user to select OK or Cancel. It is not necessary to display a dialog box for signature setup unless you specifically need information from the author about the signature line. If you can provide all of the necessary details back to Microsoft Office without user input, then no dialog is necessary.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowSigningCeremony">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowSigningCeremony(System::Object ^ ParentWindow, Microsoft::Office::Core::SignatureSetup ^ psigsetup, Microsoft::Office::Core::SignatureInfo ^ psiginfo);" />
      <MemberSignature Language="C#" Value="public void ShowSigningCeremony (object ParentWindow, Microsoft.Office.Core.SignatureSetup psigsetup, Microsoft.Office.Core.SignatureInfo psiginfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowSigningCeremony([in]object ParentWindow, [in]class Microsoft.Office.Core.SignatureSetup psigsetup, [in]class Microsoft.Office.Core.SignatureInfo psiginfo) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.SignatureProvider.ShowSigningCeremony(System.Object,Microsoft.Office.Core.SignatureSetup,Microsoft.Office.Core.SignatureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowSigningCeremony (ParentWindow As Object, psigsetup As SignatureSetup, psiginfo As SignatureInfo)" />
      <MemberSignature Language="F#" Value="abstract member ShowSigningCeremony : obj * Microsoft.Office.Core.SignatureSetup * Microsoft.Office.Core.SignatureInfo -&gt; unit" Usage="signatureProvider.ShowSigningCeremony (ParentWindow, psigsetup, psiginfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610743810)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610743810)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ParentWindow" Type="System.Object" />
        <Parameter Name="psigsetup" Type="Microsoft.Office.Core.SignatureSetup" />
        <Parameter Name="psiginfo" Type="Microsoft.Office.Core.SignatureInfo" />
      </Parameters>
      <Docs>
        <param name="ParentWindow">Contains the handle to the window containing the Signature dialog box.</param>
        <param name="psigsetup">Specifies initial settings of the signature provider.</param>
        <param name="psiginfo">Specifies information about the signature provider.</param>
        <summary>Provides a signature provider add-in the opportunity to display the Signature dialog box to users, allowing them to specify their identity and then be authenticated.</summary>
        <remarks>
          <para>This method is internally called by the Microsoft Office application when the user is attempting to sign a signature line, or if the add-in has called the <see cref="M:Microsoft.Office.Core.Signature.Sign(System.Object,System.Object,System.Object,System.Object)" /> method in the Office application's object model on a <see cref="T:Microsoft.Office.Core.Signature" /> object.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignXmlDsig">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SignXmlDsig(System::Object ^ QueryContinue, Microsoft::Office::Core::SignatureSetup ^ psigsetup, Microsoft::Office::Core::SignatureInfo ^ psiginfo, System::Object ^ XmlDsigStream);" />
      <MemberSignature Language="C#" Value="public void SignXmlDsig (object QueryContinue, Microsoft.Office.Core.SignatureSetup psigsetup, Microsoft.Office.Core.SignatureInfo psiginfo, object XmlDsigStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SignXmlDsig([in]object QueryContinue, [in]class Microsoft.Office.Core.SignatureSetup psigsetup, [in]class Microsoft.Office.Core.SignatureInfo psiginfo, [in]object XmlDsigStream) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.SignatureProvider.SignXmlDsig(System.Object,Microsoft.Office.Core.SignatureSetup,Microsoft.Office.Core.SignatureInfo,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SignXmlDsig (QueryContinue As Object, psigsetup As SignatureSetup, psiginfo As SignatureInfo, XmlDsigStream As Object)" />
      <MemberSignature Language="F#" Value="abstract member SignXmlDsig : obj * Microsoft.Office.Core.SignatureSetup * Microsoft.Office.Core.SignatureInfo * obj -&gt; unit" Usage="signatureProvider.SignXmlDsig (QueryContinue, psigsetup, psiginfo, XmlDsigStream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610743811)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610743811)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="QueryContinue" Type="System.Object" />
        <Parameter Name="psigsetup" Type="Microsoft.Office.Core.SignatureSetup" />
        <Parameter Name="psiginfo" Type="Microsoft.Office.Core.SignatureInfo" />
        <Parameter Name="XmlDsigStream" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="QueryContinue">Provides a way to query the host application for permission to continue the verification operation.</param>
        <param name="psigsetup">Specifies configuration information about a signature line.</param>
        <param name="psiginfo">Specifies information captured from the signing ceremony.</param>
        <param name="XmlDsigStream">Represents a steam of data containing XML, which represents an <b>XMLDSIG</b> object.</param>
        <summary>Used to sign the XMLDSIG template.</summary>
        <remarks>
          <para>XMLDSIG is a standards-based signature format <a href="http://www.w3.org/TR/xmldsig-core/">http://www.w3.org/TR/xmldsig-core/</a></para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyXmlDsig">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyXmlDsig(System::Object ^ QueryContinue, Microsoft::Office::Core::SignatureSetup ^ psigsetup, Microsoft::Office::Core::SignatureInfo ^ psiginfo, System::Object ^ XmlDsigStream, [Runtime::InteropServices::Out] Microsoft::Office::Core::ContentVerificationResults % pcontverres, [Runtime::InteropServices::Out] Microsoft::Office::Core::CertificateVerificationResults % pcertverres);" />
      <MemberSignature Language="C#" Value="public void VerifyXmlDsig (object QueryContinue, Microsoft.Office.Core.SignatureSetup psigsetup, Microsoft.Office.Core.SignatureInfo psiginfo, object XmlDsigStream, out Microsoft.Office.Core.ContentVerificationResults pcontverres, out Microsoft.Office.Core.CertificateVerificationResults pcertverres);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VerifyXmlDsig([in]object QueryContinue, [in]class Microsoft.Office.Core.SignatureSetup psigsetup, [in]class Microsoft.Office.Core.SignatureInfo psiginfo, [in]object XmlDsigStream, [out] valuetype Microsoft.Office.Core.ContentVerificationResults&amp; pcontverres, [out] valuetype Microsoft.Office.Core.CertificateVerificationResults&amp; pcertverres) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.SignatureProvider.VerifyXmlDsig(System.Object,Microsoft.Office.Core.SignatureSetup,Microsoft.Office.Core.SignatureInfo,System.Object,Microsoft.Office.Core.ContentVerificationResults@,Microsoft.Office.Core.CertificateVerificationResults@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyXmlDsig (QueryContinue As Object, psigsetup As SignatureSetup, psiginfo As SignatureInfo, XmlDsigStream As Object, ByRef pcontverres As ContentVerificationResults, ByRef pcertverres As CertificateVerificationResults)" />
      <MemberSignature Language="F#" Value="abstract member VerifyXmlDsig : obj * Microsoft.Office.Core.SignatureSetup * Microsoft.Office.Core.SignatureInfo * obj * ContentVerificationResults * CertificateVerificationResults -&gt; unit" Usage="signatureProvider.VerifyXmlDsig (QueryContinue, psigsetup, psiginfo, XmlDsigStream, pcontverres, pcertverres)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610743813)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610743813)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="QueryContinue" Type="System.Object" />
        <Parameter Name="psigsetup" Type="Microsoft.Office.Core.SignatureSetup" />
        <Parameter Name="psiginfo" Type="Microsoft.Office.Core.SignatureInfo" />
        <Parameter Name="XmlDsigStream" Type="System.Object" />
        <Parameter Name="pcontverres" Type="Microsoft.Office.Core.ContentVerificationResults" RefType="out" />
        <Parameter Name="pcertverres" Type="Microsoft.Office.Core.CertificateVerificationResults" RefType="out" />
      </Parameters>
      <Docs>
        <param name="QueryContinue">Provides a way to query the host application for permission to continue the verification operation.</param>
        <param name="psigsetup">Specifies configuration information about a signature line.</param>
        <param name="psiginfo">Specifies information captured from the signing ceremony.</param>
        <param name="XmlDsigStream">Represents a steam of data containing XML, which represents an <b>XMLDSIG</b> object.</param>
        <param name="pcontverres">Specifies the status of the signature verification action.</param>
        <param name="pcertverres">Specifies the status of the signing certificate  verification.</param>
        <summary>Verifies a signature based on the signed state of the document and the legitimacy of the certificate used for signing.</summary>
        <remarks>
          <para>XMLDSIG is a standards-based signature format (<a href="http://www.w3.org/TR/xmldsig-core/">http://www.w3.org/TR/xmldsig-core/</a></para>
          <para />
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
